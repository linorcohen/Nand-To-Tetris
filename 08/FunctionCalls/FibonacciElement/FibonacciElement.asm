// bootstrap initialize
@256
D=A
@SP
M=D
// call Sys.init 0
@.Sys.init$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A     
@5
D=D+A
@SP
D=M-D 
@ARG
M=D      
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(.Sys.init$ret.0)
// function Main.fibonacci 0
(Main.fibonacci)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
M=M-1
A=M
D=M
@Main.NEG_LT_1
D;JLT
@SP
A=M-1
D=M
@Main.POS_NEG_LT_1
D;JLT
@Main.SAME_SIGN_LT_1
0;JMP
(Main.NEG_LT_1)
@SP
A=M-1
D=M
@Main.SAME_SIGN_LT_1
D;JLT
D=1
@Main.CHECK_COMMAND_LT_1
0;JMP
(Main.POS_NEG_LT_1)
D=-1
@Main.CHECK_COMMAND_LT_1
0;JMP
(Main.SAME_SIGN_LT_1)
@SP
A=M
D=M
@SP
A=M-1
D=M-D
(Main.CHECK_COMMAND_LT_1)
@Main.TRUE_LT_1
D;JLT
@SP
A=M-1
M=0
@Main.LT_1
0;JMP
(Main.TRUE_LT_1)
@SP
A=M-1
M=-1
(Main.LT_1)
// if-goto IF_TRUE
@SP
M=M-1
A=M
D=M
@Main.Main.fibonacci$IF_TRUE
D;JNE
// goto IF_FALSE
@Main.Main.fibonacci$IF_FALSE
0;JMP
// label IF_TRUE
(Main.Main.fibonacci$IF_TRUE)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R14
M=D
@5
A=D-A
D=M
@R15
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
M=M-1
A=M
D=M
@THAT
M=D
@R14
M=M-1
A=M
D=M
@THIS
M=D
@R14
M=M-1
A=M
D=M
@ARG
M=D
@R14
M=M-1
A=M
D=M
@LCL
M=D
@R15
A=M
0;JMP
// label IF_FALSE
(Main.Main.fibonacci$IF_FALSE)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
A=M
D=M
A=A-1
D=M-D
M=D
// call Main.fibonacci 1
@Main.Main.fibonacci$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@1
D=A     
@5
D=D+A
@SP
D=M-D 
@ARG
M=D      
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.Main.fibonacci$ret.1)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
A=M
D=M
A=A-1
D=M-D
M=D
// call Main.fibonacci 1
@Main.Main.fibonacci$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@1
D=A     
@5
D=D+A
@SP
D=M-D 
@ARG
M=D      
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.Main.fibonacci$ret.2)
// add
@SP
M=M-1
A=M
D=M
A=A-1
D=M+D
M=D
// return
@LCL
D=M
@R14
M=D
@5
A=D-A
D=M
@R15
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
M=M-1
A=M
D=M
@THAT
M=D
@R14
M=M-1
A=M
D=M
@THIS
M=D
@R14
M=M-1
A=M
D=M
@ARG
M=D
@R14
M=M-1
A=M
D=M
@LCL
M=D
@R15
A=M
0;JMP
// function Sys.init 0
(Sys.init)
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Main.fibonacci 1
@Sys.Main.fibonacci$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@1
D=A     
@5
D=D+A
@SP
D=M-D 
@ARG
M=D      
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Sys.Main.fibonacci$ret.0)
// label WHILE
(Sys.Sys.init$WHILE)
// goto WHILE
@Sys.Sys.init$WHILE
0;JMP
