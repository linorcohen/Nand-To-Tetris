//bootstrap
@256
D=A
@R0
M=D
//call Sys.init 0
@.Sys.init$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Sys.init
0;JMP
(.Sys.init$ret.0)
//function Array.new 0
(Array.new)
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@Array.Array.new$ifnegfirst0
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Array.Array.new$samesign0
D;JGT
D=-1
@Array.Array.new$true0
D;JGT
@Array.Array.new$false0
0;JMP
(Array.Array.new$ifnegfirst0)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Array.Array.new$samesign0
D;JLT
D=1
@Array.Array.new$true0
D;JGT
@Array.Array.new$false0
0;JMP
(Array.Array.new$samesign0)
@R14
D=D-M
@Array.Array.new$true0
D;JGT
@Array.Array.new$false0
0;JMP
(Array.Array.new$true0)
@SP
A=M
M=-1
@SP
M=M+1
@Array.Array.new$end0
0;JMP
(Array.Array.new$false0)
@SP
A=M
M=0
@SP
M=M+1
(Array.Array.new$end0)
//not
@SP
A=M-1
M=!M
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M
@Array.Array.new$IF_TRUE0
D;JGT
D;JLT
//goto IF_FALSE0
@Array.Array.new$IF_FALSE0
0;JMP
//label IF_TRUE0
(Array.Array.new$IF_TRUE0)
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//call Sys.error 1
@Array.Sys.error$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Sys.error
0;JMP
(Array.Sys.error$ret.1)
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//label IF_FALSE0
(Array.Array.new$IF_FALSE0)
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//call Memory.alloc 1
@Array.Memory.alloc$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Memory.alloc
0;JMP
(Array.Memory.alloc$ret.2)
//return
@1
D=M
@R14
M=D
@5
A=D-A
D=M
@R15
M=D
//pop argument 0
@2
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@2
D=M
@SP
M=D+1
@R14
A=M-1
D=M
@4
M=D
@2
D=A
@R14
A=M-D
D=M
@3
M=D
@3
D=A
@R14
A=M-D
D=M
@2
M=D
@4
D=A
@R14
A=M-D
D=M
@1
M=D
@R15
A=M
0;JMP
//function Array.dispose 0
(Array.dispose)
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@SP
M=M-1
A=M
D=M
@3
M=D
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
//call Memory.deAlloc 1
@Array.Memory.deAlloc$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Memory.deAlloc
0;JMP
(Array.Memory.deAlloc$ret.3)
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//return
@1
D=M
@R14
M=D
@5
A=D-A
D=M
@R15
M=D
//pop argument 0
@2
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@2
D=M
@SP
M=D+1
@R14
A=M-1
D=M
@4
M=D
@2
D=A
@R14
A=M-D
D=M
@3
M=D
@3
D=A
@R14
A=M-D
D=M
@2
M=D
@4
D=A
@R14
A=M-D
D=M
@1
M=D
@R15
A=M
0;JMP
//function Main.main 12
(Main.main)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@1
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@1
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 2
@1
D=M
@2
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 3
@1
D=M
@3
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 4
@1
D=M
@4
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 5
@1
D=M
@5
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push local 2
@1
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push local 3
@1
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push local 4
@1
D=M
@4
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push local 5
@1
D=M
@5
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop local 6
@1
D=M
@6
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//call Math.multiply 2
@Main.Math.multiply$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Math.multiply
0;JMP
(Main.Math.multiply$ret.0)
//push local 2
@1
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 3
@1
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//call Math.multiply 2
@Main.Math.multiply$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Math.multiply
0;JMP
(Main.Math.multiply$ret.1)
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push local 4
@1
D=M
@4
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 5
@1
D=M
@5
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//call Math.multiply 2
@Main.Math.multiply$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Math.multiply
0;JMP
(Main.Math.multiply$ret.2)
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop local 7
@1
D=M
@7
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 5
@1
D=M
@5
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//call Math.divide 2
@Main.Math.divide$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Math.divide
0;JMP
(Main.Math.divide$ret.3)
//push local 4
@1
D=M
@4
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//call Math.divide 2
@Main.Math.divide$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Math.divide
0;JMP
(Main.Math.divide$ret.4)
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//call Math.divide 2
@Main.Math.divide$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Math.divide
0;JMP
(Main.Math.divide$ret.5)
//pop local 8
@1
D=M
@8
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 5000
@5000
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 6
@1
D=M
@6
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//call Memory.poke 2
@Main.Memory.poke$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Memory.poke
0;JMP
(Main.Memory.poke$ret.6)
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//push constant 5001
@5001
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 7
@1
D=M
@7
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//call Memory.poke 2
@Main.Memory.poke$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Memory.poke
0;JMP
(Main.Memory.poke$ret.7)
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//push constant 5002
@5002
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 8
@1
D=M
@8
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//call Memory.poke 2
@Main.Memory.poke$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Memory.poke
0;JMP
(Main.Memory.poke$ret.8)
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//return
@1
D=M
@R14
M=D
@5
A=D-A
D=M
@R15
M=D
//pop argument 0
@2
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@2
D=M
@SP
M=D+1
@R14
A=M-1
D=M
@4
M=D
@2
D=A
@R14
A=M-D
D=M
@3
M=D
@3
D=A
@R14
A=M-D
D=M
@2
M=D
@4
D=A
@R14
A=M-D
D=M
@1
M=D
@R15
A=M
0;JMP
//function Math.init 1
(Math.init)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
//call Array.new 1
@Math.Array.new$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Array.new
0;JMP
(Math.Array.new$ret.0)
//pop static 1
@SP
M=M-1
A=M
D=M
@Math.1
M=D
//push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
//call Array.new 1
@Math.Array.new$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Array.new
0;JMP
(Math.Array.new$ret.1)
//pop static 0
@SP
M=M-1
A=M
D=M
@Math.0
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@4
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label WHILE_EXP0
(Math.Math.init$WHILE_EXP0)
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@Math.Math.init$ifnegfirst0
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.init$samesign0
D;JGT
D=-1
@Math.Math.init$true0
D;JLT
@Math.Math.init$false0
0;JMP
(Math.Math.init$ifnegfirst0)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.init$samesign0
D;JLT
D=1
@Math.Math.init$true0
D;JLT
@Math.Math.init$false0
0;JMP
(Math.Math.init$samesign0)
@R14
D=D-M
@Math.Math.init$true0
D;JLT
@Math.Math.init$false0
0;JMP
(Math.Math.init$true0)
@SP
A=M
M=-1
@SP
M=M+1
@Math.Math.init$end0
0;JMP
(Math.Math.init$false0)
@SP
A=M
M=0
@SP
M=M+1
(Math.Math.init$end0)
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M
@Math.Math.init$WHILE_END0
D;JGT
D;JLT
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop local 0
@1
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@4
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//goto WHILE_EXP0
@Math.Math.init$WHILE_EXP0
0;JMP
//label WHILE_END0
(Math.Math.init$WHILE_END0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//return
@1
D=M
@R14
M=D
@5
A=D-A
D=M
@R15
M=D
//pop argument 0
@2
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@2
D=M
@SP
M=D+1
@R14
A=M-1
D=M
@4
M=D
@2
D=A
@R14
A=M-D
D=M
@3
M=D
@3
D=A
@R14
A=M-D
D=M
@2
M=D
@4
D=A
@R14
A=M-D
D=M
@1
M=D
@R15
A=M
0;JMP
//function Math.abs 0
(Math.abs)
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@Math.Math.abs$ifnegfirst1
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.abs$samesign1
D;JGT
D=-1
@Math.Math.abs$true1
D;JLT
@Math.Math.abs$false1
0;JMP
(Math.Math.abs$ifnegfirst1)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.abs$samesign1
D;JLT
D=1
@Math.Math.abs$true1
D;JLT
@Math.Math.abs$false1
0;JMP
(Math.Math.abs$samesign1)
@R14
D=D-M
@Math.Math.abs$true1
D;JLT
@Math.Math.abs$false1
0;JMP
(Math.Math.abs$true1)
@SP
A=M
M=-1
@SP
M=M+1
@Math.Math.abs$end1
0;JMP
(Math.Math.abs$false1)
@SP
A=M
M=0
@SP
M=M+1
(Math.Math.abs$end1)
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M
@Math.Math.abs$IF_TRUE0
D;JGT
D;JLT
//goto IF_FALSE0
@Math.Math.abs$IF_FALSE0
0;JMP
//label IF_TRUE0
(Math.Math.abs$IF_TRUE0)
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
M=M-1
A=M
M=-M
@SP
M=M+1//pop argument 0
@2
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE0
(Math.Math.abs$IF_FALSE0)
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//return
@1
D=M
@R14
M=D
@5
A=D-A
D=M
@R15
M=D
//pop argument 0
@2
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@2
D=M
@SP
M=D+1
@R14
A=M-1
D=M
@4
M=D
@2
D=A
@R14
A=M-D
D=M
@3
M=D
@3
D=A
@R14
A=M-D
D=M
@2
M=D
@4
D=A
@R14
A=M-D
D=M
@1
M=D
@R15
A=M
0;JMP
//function Math.multiply 5
(Math.multiply)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@Math.Math.multiply$ifnegfirst2
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.multiply$samesign2
D;JGT
D=-1
@Math.Math.multiply$true2
D;JLT
@Math.Math.multiply$false2
0;JMP
(Math.Math.multiply$ifnegfirst2)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.multiply$samesign2
D;JLT
D=1
@Math.Math.multiply$true2
D;JLT
@Math.Math.multiply$false2
0;JMP
(Math.Math.multiply$samesign2)
@R14
D=D-M
@Math.Math.multiply$true2
D;JLT
@Math.Math.multiply$false2
0;JMP
(Math.Math.multiply$true2)
@SP
A=M
M=-1
@SP
M=M+1
@Math.Math.multiply$end2
0;JMP
(Math.Math.multiply$false2)
@SP
A=M
M=0
@SP
M=M+1
(Math.Math.multiply$end2)
//push argument 1
@2
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@Math.Math.multiply$ifnegfirst3
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.multiply$samesign3
D;JGT
D=-1
@Math.Math.multiply$true3
D;JGT
@Math.Math.multiply$false3
0;JMP
(Math.Math.multiply$ifnegfirst3)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.multiply$samesign3
D;JLT
D=1
@Math.Math.multiply$true3
D;JGT
@Math.Math.multiply$false3
0;JMP
(Math.Math.multiply$samesign3)
@R14
D=D-M
@Math.Math.multiply$true3
D;JGT
@Math.Math.multiply$false3
0;JMP
(Math.Math.multiply$true3)
@SP
A=M
M=-1
@SP
M=M+1
@Math.Math.multiply$end3
0;JMP
(Math.Math.multiply$false3)
@SP
A=M
M=0
@SP
M=M+1
(Math.Math.multiply$end3)
//and
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=D&M
@SP
M=M+1//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@Math.Math.multiply$ifnegfirst4
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.multiply$samesign4
D;JGT
D=-1
@Math.Math.multiply$true4
D;JGT
@Math.Math.multiply$false4
0;JMP
(Math.Math.multiply$ifnegfirst4)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.multiply$samesign4
D;JLT
D=1
@Math.Math.multiply$true4
D;JGT
@Math.Math.multiply$false4
0;JMP
(Math.Math.multiply$samesign4)
@R14
D=D-M
@Math.Math.multiply$true4
D;JGT
@Math.Math.multiply$false4
0;JMP
(Math.Math.multiply$true4)
@SP
A=M
M=-1
@SP
M=M+1
@Math.Math.multiply$end4
0;JMP
(Math.Math.multiply$false4)
@SP
A=M
M=0
@SP
M=M+1
(Math.Math.multiply$end4)
//push argument 1
@2
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@Math.Math.multiply$ifnegfirst5
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.multiply$samesign5
D;JGT
D=-1
@Math.Math.multiply$true5
D;JLT
@Math.Math.multiply$false5
0;JMP
(Math.Math.multiply$ifnegfirst5)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.multiply$samesign5
D;JLT
D=1
@Math.Math.multiply$true5
D;JLT
@Math.Math.multiply$false5
0;JMP
(Math.Math.multiply$samesign5)
@R14
D=D-M
@Math.Math.multiply$true5
D;JLT
@Math.Math.multiply$false5
0;JMP
(Math.Math.multiply$true5)
@SP
A=M
M=-1
@SP
M=M+1
@Math.Math.multiply$end5
0;JMP
(Math.Math.multiply$false5)
@SP
A=M
M=0
@SP
M=M+1
(Math.Math.multiply$end5)
//and
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=D&M
@SP
M=M+1//or
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=D|M
@SP
M=M+1//pop local 4
@1
D=M
@4
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//call Math.abs 1
@Math.Math.abs$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Math.abs
0;JMP
(Math.Math.abs$ret.2)
//pop argument 0
@2
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push argument 1
@2
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//call Math.abs 1
@Math.Math.abs$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Math.abs
0;JMP
(Math.Math.abs$ret.3)
//pop argument 1
@2
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@2
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@Math.Math.multiply$ifnegfirst6
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.multiply$samesign6
D;JGT
D=-1
@Math.Math.multiply$true6
D;JLT
@Math.Math.multiply$false6
0;JMP
(Math.Math.multiply$ifnegfirst6)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.multiply$samesign6
D;JLT
D=1
@Math.Math.multiply$true6
D;JLT
@Math.Math.multiply$false6
0;JMP
(Math.Math.multiply$samesign6)
@R14
D=D-M
@Math.Math.multiply$true6
D;JLT
@Math.Math.multiply$false6
0;JMP
(Math.Math.multiply$true6)
@SP
A=M
M=-1
@SP
M=M+1
@Math.Math.multiply$end6
0;JMP
(Math.Math.multiply$false6)
@SP
A=M
M=0
@SP
M=M+1
(Math.Math.multiply$end6)
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M
@Math.Math.multiply$IF_TRUE0
D;JGT
D;JLT
//goto IF_FALSE0
@Math.Math.multiply$IF_FALSE0
0;JMP
//label IF_TRUE0
(Math.Math.multiply$IF_TRUE0)
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@1
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push argument 1
@2
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop argument 0
@2
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop argument 1
@2
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE0
(Math.Math.multiply$IF_FALSE0)
//label WHILE_EXP0
(Math.Math.multiply$WHILE_EXP0)
//push local 2
@1
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@2
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@Math.Math.multiply$ifnegfirst7
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.multiply$samesign7
D;JGT
D=-1
@Math.Math.multiply$true7
D;JLT
@Math.Math.multiply$false7
0;JMP
(Math.Math.multiply$ifnegfirst7)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.multiply$samesign7
D;JLT
D=1
@Math.Math.multiply$true7
D;JLT
@Math.Math.multiply$false7
0;JMP
(Math.Math.multiply$samesign7)
@R14
D=D-M
@Math.Math.multiply$true7
D;JLT
@Math.Math.multiply$false7
0;JMP
(Math.Math.multiply$true7)
@SP
A=M
M=-1
@SP
M=M+1
@Math.Math.multiply$end7
0;JMP
(Math.Math.multiply$false7)
@SP
A=M
M=0
@SP
M=M+1
(Math.Math.multiply$end7)
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M
@Math.Math.multiply$WHILE_END0
D;JGT
D;JLT
//push local 3
@1
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@2
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//and
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=D&M
@SP
M=M+1//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@Math.Math.multiply$ifnegfirst8
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.multiply$samesign8
D;JGT
D=-1
@Math.Math.multiply$true8
D;JGT
@Math.Math.multiply$false8
0;JMP
(Math.Math.multiply$ifnegfirst8)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.multiply$samesign8
D;JLT
D=1
@Math.Math.multiply$true8
D;JGT
@Math.Math.multiply$false8
0;JMP
(Math.Math.multiply$samesign8)
@R14
D=D-M
@Math.Math.multiply$true8
D;JGT
@Math.Math.multiply$false8
0;JMP
(Math.Math.multiply$true8)
@SP
A=M
M=-1
@SP
M=M+1
@Math.Math.multiply$end8
0;JMP
(Math.Math.multiply$false8)
@SP
A=M
M=0
@SP
M=M+1
(Math.Math.multiply$end8)
//if-goto IF_TRUE1
@SP
M=M-1
A=M
D=M
@Math.Math.multiply$IF_TRUE1
D;JGT
D;JLT
//goto IF_FALSE1
@Math.Math.multiply$IF_FALSE1
0;JMP
//label IF_TRUE1
(Math.Math.multiply$IF_TRUE1)
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop local 0
@1
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 2
@1
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 3
@1
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop local 2
@1
D=M
@2
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE1
(Math.Math.multiply$IF_FALSE1)
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop argument 0
@2
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 3
@1
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop local 3
@1
D=M
@3
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//goto WHILE_EXP0
@Math.Math.multiply$WHILE_EXP0
0;JMP
//label WHILE_END0
(Math.Math.multiply$WHILE_END0)
//push local 4
@1
D=M
@4
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//if-goto IF_TRUE2
@SP
M=M-1
A=M
D=M
@Math.Math.multiply$IF_TRUE2
D;JGT
D;JLT
//goto IF_FALSE2
@Math.Math.multiply$IF_FALSE2
0;JMP
//label IF_TRUE2
(Math.Math.multiply$IF_TRUE2)
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
M=M-1
A=M
M=-M
@SP
M=M+1//pop local 0
@1
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE2
(Math.Math.multiply$IF_FALSE2)
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//return
@1
D=M
@R14
M=D
@5
A=D-A
D=M
@R15
M=D
//pop argument 0
@2
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@2
D=M
@SP
M=D+1
@R14
A=M-1
D=M
@4
M=D
@2
D=A
@R14
A=M-D
D=M
@3
M=D
@3
D=A
@R14
A=M-D
D=M
@2
M=D
@4
D=A
@R14
A=M-D
D=M
@1
M=D
@R15
A=M
0;JMP
//function Math.divide 4
(Math.divide)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@2
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
@SP
M=M-1
A=M
D=M
@Math.Math.divide$ifnegfirst9
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.divide$samesign9
D;JGT
D=-1
@Math.Math.divide$true9
D;JEQ
@Math.Math.divide$false9
0;JMP
(Math.Math.divide$ifnegfirst9)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.divide$samesign9
D;JLT
D=1
@Math.Math.divide$true9
D;JEQ
@Math.Math.divide$false9
0;JMP
(Math.Math.divide$samesign9)
@R14
D=D-M
@Math.Math.divide$true9
D;JEQ
@Math.Math.divide$false9
0;JMP
(Math.Math.divide$true9)
@SP
A=M
M=-1
@SP
M=M+1
@Math.Math.divide$end9
0;JMP
(Math.Math.divide$false9)
@SP
A=M
M=0
@SP
M=M+1
(Math.Math.divide$end9)
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M
@Math.Math.divide$IF_TRUE0
D;JGT
D;JLT
//goto IF_FALSE0
@Math.Math.divide$IF_FALSE0
0;JMP
//label IF_TRUE0
(Math.Math.divide$IF_TRUE0)
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//call Sys.error 1
@Math.Sys.error$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Sys.error
0;JMP
(Math.Sys.error$ret.4)
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//label IF_FALSE0
(Math.Math.divide$IF_FALSE0)
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@Math.Math.divide$ifnegfirst10
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.divide$samesign10
D;JGT
D=-1
@Math.Math.divide$true10
D;JLT
@Math.Math.divide$false10
0;JMP
(Math.Math.divide$ifnegfirst10)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.divide$samesign10
D;JLT
D=1
@Math.Math.divide$true10
D;JLT
@Math.Math.divide$false10
0;JMP
(Math.Math.divide$samesign10)
@R14
D=D-M
@Math.Math.divide$true10
D;JLT
@Math.Math.divide$false10
0;JMP
(Math.Math.divide$true10)
@SP
A=M
M=-1
@SP
M=M+1
@Math.Math.divide$end10
0;JMP
(Math.Math.divide$false10)
@SP
A=M
M=0
@SP
M=M+1
(Math.Math.divide$end10)
//push argument 1
@2
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@Math.Math.divide$ifnegfirst11
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.divide$samesign11
D;JGT
D=-1
@Math.Math.divide$true11
D;JGT
@Math.Math.divide$false11
0;JMP
(Math.Math.divide$ifnegfirst11)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.divide$samesign11
D;JLT
D=1
@Math.Math.divide$true11
D;JGT
@Math.Math.divide$false11
0;JMP
(Math.Math.divide$samesign11)
@R14
D=D-M
@Math.Math.divide$true11
D;JGT
@Math.Math.divide$false11
0;JMP
(Math.Math.divide$true11)
@SP
A=M
M=-1
@SP
M=M+1
@Math.Math.divide$end11
0;JMP
(Math.Math.divide$false11)
@SP
A=M
M=0
@SP
M=M+1
(Math.Math.divide$end11)
//and
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=D&M
@SP
M=M+1//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@Math.Math.divide$ifnegfirst12
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.divide$samesign12
D;JGT
D=-1
@Math.Math.divide$true12
D;JGT
@Math.Math.divide$false12
0;JMP
(Math.Math.divide$ifnegfirst12)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.divide$samesign12
D;JLT
D=1
@Math.Math.divide$true12
D;JGT
@Math.Math.divide$false12
0;JMP
(Math.Math.divide$samesign12)
@R14
D=D-M
@Math.Math.divide$true12
D;JGT
@Math.Math.divide$false12
0;JMP
(Math.Math.divide$true12)
@SP
A=M
M=-1
@SP
M=M+1
@Math.Math.divide$end12
0;JMP
(Math.Math.divide$false12)
@SP
A=M
M=0
@SP
M=M+1
(Math.Math.divide$end12)
//push argument 1
@2
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@Math.Math.divide$ifnegfirst13
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.divide$samesign13
D;JGT
D=-1
@Math.Math.divide$true13
D;JLT
@Math.Math.divide$false13
0;JMP
(Math.Math.divide$ifnegfirst13)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.divide$samesign13
D;JLT
D=1
@Math.Math.divide$true13
D;JLT
@Math.Math.divide$false13
0;JMP
(Math.Math.divide$samesign13)
@R14
D=D-M
@Math.Math.divide$true13
D;JLT
@Math.Math.divide$false13
0;JMP
(Math.Math.divide$true13)
@SP
A=M
M=-1
@SP
M=M+1
@Math.Math.divide$end13
0;JMP
(Math.Math.divide$false13)
@SP
A=M
M=0
@SP
M=M+1
(Math.Math.divide$end13)
//and
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=D&M
@SP
M=M+1//or
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=D|M
@SP
M=M+1//pop local 2
@1
D=M
@2
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push argument 1
@2
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//call Math.abs 1
@Math.Math.abs$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Math.abs
0;JMP
(Math.Math.abs$ret.5)
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@4
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//call Math.abs 1
@Math.Math.abs$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Math.abs
0;JMP
(Math.Math.abs$ret.6)
//pop argument 0
@2
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label WHILE_EXP0
(Math.Math.divide$WHILE_EXP0)
//push local 3
@1
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M
@Math.Math.divide$WHILE_END0
D;JGT
D;JLT
//push constant 32767
@32767
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@Math.Math.divide$ifnegfirst14
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.divide$samesign14
D;JGT
D=-1
@Math.Math.divide$true14
D;JLT
@Math.Math.divide$false14
0;JMP
(Math.Math.divide$ifnegfirst14)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.divide$samesign14
D;JLT
D=1
@Math.Math.divide$true14
D;JLT
@Math.Math.divide$false14
0;JMP
(Math.Math.divide$samesign14)
@R14
D=D-M
@Math.Math.divide$true14
D;JLT
@Math.Math.divide$false14
0;JMP
(Math.Math.divide$true14)
@SP
A=M
M=-1
@SP
M=M+1
@Math.Math.divide$end14
0;JMP
(Math.Math.divide$false14)
@SP
A=M
M=0
@SP
M=M+1
(Math.Math.divide$end14)
//pop local 3
@1
D=M
@3
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 3
@1
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//if-goto IF_TRUE1
@SP
M=M-1
A=M
D=M
@Math.Math.divide$IF_TRUE1
D;JGT
D;JLT
//goto IF_FALSE1
@Math.Math.divide$IF_FALSE1
0;JMP
//label IF_TRUE1
(Math.Math.divide$IF_TRUE1)
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@4
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@Math.Math.divide$ifnegfirst15
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.divide$samesign15
D;JGT
D=-1
@Math.Math.divide$true15
D;JGT
@Math.Math.divide$false15
0;JMP
(Math.Math.divide$ifnegfirst15)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.divide$samesign15
D;JLT
D=1
@Math.Math.divide$true15
D;JGT
@Math.Math.divide$false15
0;JMP
(Math.Math.divide$samesign15)
@R14
D=D-M
@Math.Math.divide$true15
D;JGT
@Math.Math.divide$false15
0;JMP
(Math.Math.divide$true15)
@SP
A=M
M=-1
@SP
M=M+1
@Math.Math.divide$end15
0;JMP
(Math.Math.divide$false15)
@SP
A=M
M=0
@SP
M=M+1
(Math.Math.divide$end15)
//pop local 3
@1
D=M
@3
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 3
@1
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//if-goto IF_TRUE2
@SP
M=M-1
A=M
D=M
@Math.Math.divide$IF_TRUE2
D;JGT
D;JLT
//goto IF_FALSE2
@Math.Math.divide$IF_FALSE2
0;JMP
//label IF_TRUE2
(Math.Math.divide$IF_TRUE2)
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop local 0
@1
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE2
(Math.Math.divide$IF_FALSE2)
//label IF_FALSE1
(Math.Math.divide$IF_FALSE1)
//goto WHILE_EXP0
@Math.Math.divide$WHILE_EXP0
0;JMP
//label WHILE_END0
(Math.Math.divide$WHILE_END0)
//label WHILE_EXP1
(Math.Math.divide$WHILE_EXP1)
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
M=M-1
A=M
M=-M
@SP
M=M+1//gt
@SP
M=M-1
A=M
D=M
@Math.Math.divide$ifnegfirst16
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.divide$samesign16
D;JGT
D=-1
@Math.Math.divide$true16
D;JGT
@Math.Math.divide$false16
0;JMP
(Math.Math.divide$ifnegfirst16)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.divide$samesign16
D;JLT
D=1
@Math.Math.divide$true16
D;JGT
@Math.Math.divide$false16
0;JMP
(Math.Math.divide$samesign16)
@R14
D=D-M
@Math.Math.divide$true16
D;JGT
@Math.Math.divide$false16
0;JMP
(Math.Math.divide$true16)
@SP
A=M
M=-1
@SP
M=M+1
@Math.Math.divide$end16
0;JMP
(Math.Math.divide$false16)
@SP
A=M
M=0
@SP
M=M+1
(Math.Math.divide$end16)
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END1
@SP
M=M-1
A=M
D=M
@Math.Math.divide$WHILE_END1
D;JGT
D;JLT
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@Math.Math.divide$ifnegfirst17
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.divide$samesign17
D;JGT
D=-1
@Math.Math.divide$true17
D;JGT
@Math.Math.divide$false17
0;JMP
(Math.Math.divide$ifnegfirst17)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.divide$samesign17
D;JLT
D=1
@Math.Math.divide$true17
D;JGT
@Math.Math.divide$false17
0;JMP
(Math.Math.divide$samesign17)
@R14
D=D-M
@Math.Math.divide$true17
D;JGT
@Math.Math.divide$false17
0;JMP
(Math.Math.divide$true17)
@SP
A=M
M=-1
@SP
M=M+1
@Math.Math.divide$end17
0;JMP
(Math.Math.divide$false17)
@SP
A=M
M=0
@SP
M=M+1
(Math.Math.divide$end17)
//not
@SP
A=M-1
M=!M
//if-goto IF_TRUE3
@SP
M=M-1
A=M
D=M
@Math.Math.divide$IF_TRUE3
D;JGT
D;JLT
//goto IF_FALSE3
@Math.Math.divide$IF_FALSE3
0;JMP
//label IF_TRUE3
(Math.Math.divide$IF_TRUE3)
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop local 1
@1
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
//pop argument 0
@2
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE3
(Math.Math.divide$IF_FALSE3)
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
//pop local 0
@1
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//goto WHILE_EXP1
@Math.Math.divide$WHILE_EXP1
0;JMP
//label WHILE_END1
(Math.Math.divide$WHILE_END1)
//push local 2
@1
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//if-goto IF_TRUE4
@SP
M=M-1
A=M
D=M
@Math.Math.divide$IF_TRUE4
D;JGT
D;JLT
//goto IF_FALSE4
@Math.Math.divide$IF_FALSE4
0;JMP
//label IF_TRUE4
(Math.Math.divide$IF_TRUE4)
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
M=M-1
A=M
M=-M
@SP
M=M+1//pop local 1
@1
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE4
(Math.Math.divide$IF_FALSE4)
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//return
@1
D=M
@R14
M=D
@5
A=D-A
D=M
@R15
M=D
//pop argument 0
@2
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@2
D=M
@SP
M=D+1
@R14
A=M-1
D=M
@4
M=D
@2
D=A
@R14
A=M-D
D=M
@3
M=D
@3
D=A
@R14
A=M-D
D=M
@2
M=D
@4
D=A
@R14
A=M-D
D=M
@1
M=D
@R15
A=M
0;JMP
//function Math.sqrt 2
(Math.sqrt)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@Math.Math.sqrt$ifnegfirst18
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.sqrt$samesign18
D;JGT
D=-1
@Math.Math.sqrt$true18
D;JLT
@Math.Math.sqrt$false18
0;JMP
(Math.Math.sqrt$ifnegfirst18)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.sqrt$samesign18
D;JLT
D=1
@Math.Math.sqrt$true18
D;JLT
@Math.Math.sqrt$false18
0;JMP
(Math.Math.sqrt$samesign18)
@R14
D=D-M
@Math.Math.sqrt$true18
D;JLT
@Math.Math.sqrt$false18
0;JMP
(Math.Math.sqrt$true18)
@SP
A=M
M=-1
@SP
M=M+1
@Math.Math.sqrt$end18
0;JMP
(Math.Math.sqrt$false18)
@SP
A=M
M=0
@SP
M=M+1
(Math.Math.sqrt$end18)
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M
@Math.Math.sqrt$IF_TRUE0
D;JGT
D;JLT
//goto IF_FALSE0
@Math.Math.sqrt$IF_FALSE0
0;JMP
//label IF_TRUE0
(Math.Math.sqrt$IF_TRUE0)
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//call Sys.error 1
@Math.Sys.error$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Sys.error
0;JMP
(Math.Sys.error$ret.7)
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//label IF_FALSE0
(Math.Math.sqrt$IF_FALSE0)
//push constant 7
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@1
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label WHILE_EXP0
(Math.Math.sqrt$WHILE_EXP0)
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
M=M-1
A=M
M=-M
@SP
M=M+1//gt
@SP
M=M-1
A=M
D=M
@Math.Math.sqrt$ifnegfirst19
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.sqrt$samesign19
D;JGT
D=-1
@Math.Math.sqrt$true19
D;JGT
@Math.Math.sqrt$false19
0;JMP
(Math.Math.sqrt$ifnegfirst19)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.sqrt$samesign19
D;JLT
D=1
@Math.Math.sqrt$true19
D;JGT
@Math.Math.sqrt$false19
0;JMP
(Math.Math.sqrt$samesign19)
@R14
D=D-M
@Math.Math.sqrt$true19
D;JGT
@Math.Math.sqrt$false19
0;JMP
(Math.Math.sqrt$true19)
@SP
A=M
M=-1
@SP
M=M+1
@Math.Math.sqrt$end19
0;JMP
(Math.Math.sqrt$false19)
@SP
A=M
M=0
@SP
M=M+1
(Math.Math.sqrt$end19)
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M
@Math.Math.sqrt$WHILE_END0
D;JGT
D;JLT
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//call Math.multiply 2
@Math.Math.multiply$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Math.multiply
0;JMP
(Math.Math.multiply$ret.8)
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@Math.Math.sqrt$ifnegfirst20
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.sqrt$samesign20
D;JGT
D=-1
@Math.Math.sqrt$true20
D;JGT
@Math.Math.sqrt$false20
0;JMP
(Math.Math.sqrt$ifnegfirst20)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.sqrt$samesign20
D;JLT
D=1
@Math.Math.sqrt$true20
D;JGT
@Math.Math.sqrt$false20
0;JMP
(Math.Math.sqrt$samesign20)
@R14
D=D-M
@Math.Math.sqrt$true20
D;JGT
@Math.Math.sqrt$false20
0;JMP
(Math.Math.sqrt$true20)
@SP
A=M
M=-1
@SP
M=M+1
@Math.Math.sqrt$end20
0;JMP
(Math.Math.sqrt$false20)
@SP
A=M
M=0
@SP
M=M+1
(Math.Math.sqrt$end20)
//not
@SP
A=M-1
M=!M
//if-goto IF_TRUE1
@SP
M=M-1
A=M
D=M
@Math.Math.sqrt$IF_TRUE1
D;JGT
D;JLT
//goto IF_FALSE1
@Math.Math.sqrt$IF_FALSE1
0;JMP
//label IF_TRUE1
(Math.Math.sqrt$IF_TRUE1)
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop local 1
@1
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE1
(Math.Math.sqrt$IF_FALSE1)
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
//pop local 0
@1
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//goto WHILE_EXP0
@Math.Math.sqrt$WHILE_EXP0
0;JMP
//label WHILE_END0
(Math.Math.sqrt$WHILE_END0)
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//return
@1
D=M
@R14
M=D
@5
A=D-A
D=M
@R15
M=D
//pop argument 0
@2
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@2
D=M
@SP
M=D+1
@R14
A=M-1
D=M
@4
M=D
@2
D=A
@R14
A=M-D
D=M
@3
M=D
@3
D=A
@R14
A=M-D
D=M
@2
M=D
@4
D=A
@R14
A=M-D
D=M
@1
M=D
@R15
A=M
0;JMP
//function Math.max 0
(Math.max)
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@2
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@Math.Math.max$ifnegfirst21
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.max$samesign21
D;JGT
D=-1
@Math.Math.max$true21
D;JGT
@Math.Math.max$false21
0;JMP
(Math.Math.max$ifnegfirst21)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.max$samesign21
D;JLT
D=1
@Math.Math.max$true21
D;JGT
@Math.Math.max$false21
0;JMP
(Math.Math.max$samesign21)
@R14
D=D-M
@Math.Math.max$true21
D;JGT
@Math.Math.max$false21
0;JMP
(Math.Math.max$true21)
@SP
A=M
M=-1
@SP
M=M+1
@Math.Math.max$end21
0;JMP
(Math.Math.max$false21)
@SP
A=M
M=0
@SP
M=M+1
(Math.Math.max$end21)
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M
@Math.Math.max$IF_TRUE0
D;JGT
D;JLT
//goto IF_FALSE0
@Math.Math.max$IF_FALSE0
0;JMP
//label IF_TRUE0
(Math.Math.max$IF_TRUE0)
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop argument 1
@2
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE0
(Math.Math.max$IF_FALSE0)
//push argument 1
@2
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//return
@1
D=M
@R14
M=D
@5
A=D-A
D=M
@R15
M=D
//pop argument 0
@2
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@2
D=M
@SP
M=D+1
@R14
A=M-1
D=M
@4
M=D
@2
D=A
@R14
A=M-D
D=M
@3
M=D
@3
D=A
@R14
A=M-D
D=M
@2
M=D
@4
D=A
@R14
A=M-D
D=M
@1
M=D
@R15
A=M
0;JMP
//function Math.min 0
(Math.min)
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@2
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@Math.Math.min$ifnegfirst22
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.min$samesign22
D;JGT
D=-1
@Math.Math.min$true22
D;JLT
@Math.Math.min$false22
0;JMP
(Math.Math.min$ifnegfirst22)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Math.Math.min$samesign22
D;JLT
D=1
@Math.Math.min$true22
D;JLT
@Math.Math.min$false22
0;JMP
(Math.Math.min$samesign22)
@R14
D=D-M
@Math.Math.min$true22
D;JLT
@Math.Math.min$false22
0;JMP
(Math.Math.min$true22)
@SP
A=M
M=-1
@SP
M=M+1
@Math.Math.min$end22
0;JMP
(Math.Math.min$false22)
@SP
A=M
M=0
@SP
M=M+1
(Math.Math.min$end22)
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M
@Math.Math.min$IF_TRUE0
D;JGT
D;JLT
//goto IF_FALSE0
@Math.Math.min$IF_FALSE0
0;JMP
//label IF_TRUE0
(Math.Math.min$IF_TRUE0)
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop argument 1
@2
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE0
(Math.Math.min$IF_FALSE0)
//push argument 1
@2
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//return
@1
D=M
@R14
M=D
@5
A=D-A
D=M
@R15
M=D
//pop argument 0
@2
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@2
D=M
@SP
M=D+1
@R14
A=M-1
D=M
@4
M=D
@2
D=A
@R14
A=M-D
D=M
@3
M=D
@3
D=A
@R14
A=M-D
D=M
@2
M=D
@4
D=A
@R14
A=M-D
D=M
@1
M=D
@R15
A=M
0;JMP
//function Memory.init 0
(Memory.init)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop static 0
@SP
M=M-1
A=M
D=M
@Memory.0
M=D
//push constant 2048
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push constant 14334
@14334
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@4
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 2049
@2049
D=A
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push constant 2050
@2050
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@4
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//return
@1
D=M
@R14
M=D
@5
A=D-A
D=M
@R15
M=D
//pop argument 0
@2
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@2
D=M
@SP
M=D+1
@R14
A=M-1
D=M
@4
M=D
@2
D=A
@R14
A=M-D
D=M
@3
M=D
@3
D=A
@R14
A=M-D
D=M
@2
M=D
@4
D=A
@R14
A=M-D
D=M
@1
M=D
@R15
A=M
0;JMP
//function Memory.peek 0
(Memory.peek)
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//return
@1
D=M
@R14
M=D
@5
A=D-A
D=M
@R15
M=D
//pop argument 0
@2
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@2
D=M
@SP
M=D+1
@R14
A=M-1
D=M
@4
M=D
@2
D=A
@R14
A=M-D
D=M
@3
M=D
@3
D=A
@R14
A=M-D
D=M
@2
M=D
@4
D=A
@R14
A=M-D
D=M
@1
M=D
@R15
A=M
0;JMP
//function Memory.poke 0
(Memory.poke)
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push argument 1
@2
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@4
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//return
@1
D=M
@R14
M=D
@5
A=D-A
D=M
@R15
M=D
//pop argument 0
@2
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@2
D=M
@SP
M=D+1
@R14
A=M-1
D=M
@4
M=D
@2
D=A
@R14
A=M-D
D=M
@3
M=D
@3
D=A
@R14
A=M-D
D=M
@2
M=D
@4
D=A
@R14
A=M-D
D=M
@1
M=D
@R15
A=M
0;JMP
//function Memory.alloc 2
(Memory.alloc)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@Memory.Memory.alloc$ifnegfirst0
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Memory.Memory.alloc$samesign0
D;JGT
D=-1
@Memory.Memory.alloc$true0
D;JLT
@Memory.Memory.alloc$false0
0;JMP
(Memory.Memory.alloc$ifnegfirst0)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Memory.Memory.alloc$samesign0
D;JLT
D=1
@Memory.Memory.alloc$true0
D;JLT
@Memory.Memory.alloc$false0
0;JMP
(Memory.Memory.alloc$samesign0)
@R14
D=D-M
@Memory.Memory.alloc$true0
D;JLT
@Memory.Memory.alloc$false0
0;JMP
(Memory.Memory.alloc$true0)
@SP
A=M
M=-1
@SP
M=M+1
@Memory.Memory.alloc$end0
0;JMP
(Memory.Memory.alloc$false0)
@SP
A=M
M=0
@SP
M=M+1
(Memory.Memory.alloc$end0)
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M
@Memory.Memory.alloc$IF_TRUE0
D;JGT
D;JLT
//goto IF_FALSE0
@Memory.Memory.alloc$IF_FALSE0
0;JMP
//label IF_TRUE0
(Memory.Memory.alloc$IF_TRUE0)
//push constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
//call Sys.error 1
@Memory.Sys.error$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Sys.error
0;JMP
(Memory.Sys.error$ret.0)
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//label IF_FALSE0
(Memory.Memory.alloc$IF_FALSE0)
//push constant 2048
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@1
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label WHILE_EXP0
(Memory.Memory.alloc$WHILE_EXP0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@Memory.Memory.alloc$ifnegfirst1
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Memory.Memory.alloc$samesign1
D;JGT
D=-1
@Memory.Memory.alloc$true1
D;JLT
@Memory.Memory.alloc$false1
0;JMP
(Memory.Memory.alloc$ifnegfirst1)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Memory.Memory.alloc$samesign1
D;JLT
D=1
@Memory.Memory.alloc$true1
D;JLT
@Memory.Memory.alloc$false1
0;JMP
(Memory.Memory.alloc$samesign1)
@R14
D=D-M
@Memory.Memory.alloc$true1
D;JLT
@Memory.Memory.alloc$false1
0;JMP
(Memory.Memory.alloc$true1)
@SP
A=M
M=-1
@SP
M=M+1
@Memory.Memory.alloc$end1
0;JMP
(Memory.Memory.alloc$false1)
@SP
A=M
M=0
@SP
M=M+1
(Memory.Memory.alloc$end1)
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M
@Memory.Memory.alloc$WHILE_END0
D;JGT
D;JLT
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@1
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//goto WHILE_EXP0
@Memory.Memory.alloc$WHILE_EXP0
0;JMP
//label WHILE_END0
(Memory.Memory.alloc$WHILE_END0)
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push constant 16379
@16379
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@Memory.Memory.alloc$ifnegfirst2
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Memory.Memory.alloc$samesign2
D;JGT
D=-1
@Memory.Memory.alloc$true2
D;JGT
@Memory.Memory.alloc$false2
0;JMP
(Memory.Memory.alloc$ifnegfirst2)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Memory.Memory.alloc$samesign2
D;JLT
D=1
@Memory.Memory.alloc$true2
D;JGT
@Memory.Memory.alloc$false2
0;JMP
(Memory.Memory.alloc$samesign2)
@R14
D=D-M
@Memory.Memory.alloc$true2
D;JGT
@Memory.Memory.alloc$false2
0;JMP
(Memory.Memory.alloc$true2)
@SP
A=M
M=-1
@SP
M=M+1
@Memory.Memory.alloc$end2
0;JMP
(Memory.Memory.alloc$false2)
@SP
A=M
M=0
@SP
M=M+1
(Memory.Memory.alloc$end2)
//if-goto IF_TRUE1
@SP
M=M-1
A=M
D=M
@Memory.Memory.alloc$IF_TRUE1
D;JGT
D;JLT
//goto IF_FALSE1
@Memory.Memory.alloc$IF_FALSE1
0;JMP
//label IF_TRUE1
(Memory.Memory.alloc$IF_TRUE1)
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//call Sys.error 1
@Memory.Sys.error$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Sys.error
0;JMP
(Memory.Sys.error$ret.1)
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//label IF_FALSE1
(Memory.Memory.alloc$IF_FALSE1)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@Memory.Memory.alloc$ifnegfirst3
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Memory.Memory.alloc$samesign3
D;JGT
D=-1
@Memory.Memory.alloc$true3
D;JGT
@Memory.Memory.alloc$false3
0;JMP
(Memory.Memory.alloc$ifnegfirst3)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Memory.Memory.alloc$samesign3
D;JLT
D=1
@Memory.Memory.alloc$true3
D;JGT
@Memory.Memory.alloc$false3
0;JMP
(Memory.Memory.alloc$samesign3)
@R14
D=D-M
@Memory.Memory.alloc$true3
D;JGT
@Memory.Memory.alloc$false3
0;JMP
(Memory.Memory.alloc$true3)
@SP
A=M
M=-1
@SP
M=M+1
@Memory.Memory.alloc$end3
0;JMP
(Memory.Memory.alloc$false3)
@SP
A=M
M=0
@SP
M=M+1
(Memory.Memory.alloc$end3)
//if-goto IF_TRUE2
@SP
M=M-1
A=M
D=M
@Memory.Memory.alloc$IF_TRUE2
D;JGT
D;JLT
//goto IF_FALSE2
@Memory.Memory.alloc$IF_FALSE2
0;JMP
//label IF_TRUE2
(Memory.Memory.alloc$IF_TRUE2)
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@4
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//eq
@SP
M=M-1
A=M
D=M
@Memory.Memory.alloc$ifnegfirst4
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Memory.Memory.alloc$samesign4
D;JGT
D=-1
@Memory.Memory.alloc$true4
D;JEQ
@Memory.Memory.alloc$false4
0;JMP
(Memory.Memory.alloc$ifnegfirst4)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Memory.Memory.alloc$samesign4
D;JLT
D=1
@Memory.Memory.alloc$true4
D;JEQ
@Memory.Memory.alloc$false4
0;JMP
(Memory.Memory.alloc$samesign4)
@R14
D=D-M
@Memory.Memory.alloc$true4
D;JEQ
@Memory.Memory.alloc$false4
0;JMP
(Memory.Memory.alloc$true4)
@SP
A=M
M=-1
@SP
M=M+1
@Memory.Memory.alloc$end4
0;JMP
(Memory.Memory.alloc$false4)
@SP
A=M
M=0
@SP
M=M+1
(Memory.Memory.alloc$end4)
//if-goto IF_TRUE3
@SP
M=M-1
A=M
D=M
@Memory.Memory.alloc$IF_TRUE3
D;JGT
D;JLT
//goto IF_FALSE3
@Memory.Memory.alloc$IF_FALSE3
0;JMP
//label IF_TRUE3
(Memory.Memory.alloc$IF_TRUE3)
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@4
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//goto IF_END3
@Memory.Memory.alloc$IF_END3
0;JMP
//label IF_FALSE3
(Memory.Memory.alloc$IF_FALSE3)
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@4
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_END3
(Memory.Memory.alloc$IF_END3)
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@4
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_FALSE2
(Memory.Memory.alloc$IF_FALSE2)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@4
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//return
@1
D=M
@R14
M=D
@5
A=D-A
D=M
@R15
M=D
//pop argument 0
@2
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@2
D=M
@SP
M=D+1
@R14
A=M-1
D=M
@4
M=D
@2
D=A
@R14
A=M-D
D=M
@3
M=D
@3
D=A
@R14
A=M-D
D=M
@2
M=D
@4
D=A
@R14
A=M-D
D=M
@1
M=D
@R15
A=M
0;JMP
//function Memory.deAlloc 2
(Memory.deAlloc)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
//pop local 0
@1
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@1
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
@SP
M=M-1
A=M
D=M
@Memory.Memory.deAlloc$ifnegfirst5
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Memory.Memory.deAlloc$samesign5
D;JGT
D=-1
@Memory.Memory.deAlloc$true5
D;JEQ
@Memory.Memory.deAlloc$false5
0;JMP
(Memory.Memory.deAlloc$ifnegfirst5)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Memory.Memory.deAlloc$samesign5
D;JLT
D=1
@Memory.Memory.deAlloc$true5
D;JEQ
@Memory.Memory.deAlloc$false5
0;JMP
(Memory.Memory.deAlloc$samesign5)
@R14
D=D-M
@Memory.Memory.deAlloc$true5
D;JEQ
@Memory.Memory.deAlloc$false5
0;JMP
(Memory.Memory.deAlloc$true5)
@SP
A=M
M=-1
@SP
M=M+1
@Memory.Memory.deAlloc$end5
0;JMP
(Memory.Memory.deAlloc$false5)
@SP
A=M
M=0
@SP
M=M+1
(Memory.Memory.deAlloc$end5)
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M
@Memory.Memory.deAlloc$IF_TRUE0
D;JGT
D;JLT
//goto IF_FALSE0
@Memory.Memory.deAlloc$IF_FALSE0
0;JMP
//label IF_TRUE0
(Memory.Memory.deAlloc$IF_TRUE0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@4
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//goto IF_END0
@Memory.Memory.deAlloc$IF_END0
0;JMP
//label IF_FALSE0
(Memory.Memory.deAlloc$IF_FALSE0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@4
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//eq
@SP
M=M-1
A=M
D=M
@Memory.Memory.deAlloc$ifnegfirst6
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Memory.Memory.deAlloc$samesign6
D;JGT
D=-1
@Memory.Memory.deAlloc$true6
D;JEQ
@Memory.Memory.deAlloc$false6
0;JMP
(Memory.Memory.deAlloc$ifnegfirst6)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Memory.Memory.deAlloc$samesign6
D;JLT
D=1
@Memory.Memory.deAlloc$true6
D;JEQ
@Memory.Memory.deAlloc$false6
0;JMP
(Memory.Memory.deAlloc$samesign6)
@R14
D=D-M
@Memory.Memory.deAlloc$true6
D;JEQ
@Memory.Memory.deAlloc$false6
0;JMP
(Memory.Memory.deAlloc$true6)
@SP
A=M
M=-1
@SP
M=M+1
@Memory.Memory.deAlloc$end6
0;JMP
(Memory.Memory.deAlloc$false6)
@SP
A=M
M=0
@SP
M=M+1
(Memory.Memory.deAlloc$end6)
//if-goto IF_TRUE1
@SP
M=M-1
A=M
D=M
@Memory.Memory.deAlloc$IF_TRUE1
D;JGT
D;JLT
//goto IF_FALSE1
@Memory.Memory.deAlloc$IF_FALSE1
0;JMP
//label IF_TRUE1
(Memory.Memory.deAlloc$IF_TRUE1)
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@4
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//goto IF_END1
@Memory.Memory.deAlloc$IF_END1
0;JMP
//label IF_FALSE1
(Memory.Memory.deAlloc$IF_FALSE1)
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@1
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push that 0
@4
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@4
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label IF_END1
(Memory.Memory.deAlloc$IF_END1)
//label IF_END0
(Memory.Memory.deAlloc$IF_END0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//return
@1
D=M
@R14
M=D
@5
A=D-A
D=M
@R15
M=D
//pop argument 0
@2
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@2
D=M
@SP
M=D+1
@R14
A=M-1
D=M
@4
M=D
@2
D=A
@R14
A=M-D
D=M
@3
M=D
@3
D=A
@R14
A=M-D
D=M
@2
M=D
@4
D=A
@R14
A=M-D
D=M
@1
M=D
@R15
A=M
0;JMP
//function Sys.init 0
(Sys.init)
//call Memory.init 0
@Sys.Memory.init$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Memory.init
0;JMP
(Sys.Memory.init$ret.0)
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//call Math.init 0
@Sys.Math.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Math.init
0;JMP
(Sys.Math.init$ret.1)
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//call Main.main 0
@Sys.Main.main$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Main.main
0;JMP
(Sys.Main.main$ret.2)
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//label WHILE_EXP0
(Sys.Sys.init$WHILE_EXP0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M
@Sys.Sys.init$WHILE_END0
D;JGT
D;JLT
//goto WHILE_EXP0
@Sys.Sys.init$WHILE_EXP0
0;JMP
//label WHILE_END0
(Sys.Sys.init$WHILE_END0)
//function Sys.halt 0
(Sys.halt)
//label WHILE_EXP0
(Sys.Sys.halt$WHILE_EXP0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M
@Sys.Sys.halt$WHILE_END0
D;JGT
D;JLT
//goto WHILE_EXP0
@Sys.Sys.halt$WHILE_EXP0
0;JMP
//label WHILE_END0
(Sys.Sys.halt$WHILE_END0)
//function Sys.wait 1
(Sys.wait)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@Sys.Sys.wait$ifnegfirst0
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Sys.Sys.wait$samesign0
D;JGT
D=-1
@Sys.Sys.wait$true0
D;JLT
@Sys.Sys.wait$false0
0;JMP
(Sys.Sys.wait$ifnegfirst0)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Sys.Sys.wait$samesign0
D;JLT
D=1
@Sys.Sys.wait$true0
D;JLT
@Sys.Sys.wait$false0
0;JMP
(Sys.Sys.wait$samesign0)
@R14
D=D-M
@Sys.Sys.wait$true0
D;JLT
@Sys.Sys.wait$false0
0;JMP
(Sys.Sys.wait$true0)
@SP
A=M
M=-1
@SP
M=M+1
@Sys.Sys.wait$end0
0;JMP
(Sys.Sys.wait$false0)
@SP
A=M
M=0
@SP
M=M+1
(Sys.Sys.wait$end0)
//if-goto IF_TRUE0
@SP
M=M-1
A=M
D=M
@Sys.Sys.wait$IF_TRUE0
D;JGT
D;JLT
//goto IF_FALSE0
@Sys.Sys.wait$IF_FALSE0
0;JMP
//label IF_TRUE0
(Sys.Sys.wait$IF_TRUE0)
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//call Sys.error 1
@Sys.Sys.error$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@2
M=D
@SP
D=M
@1
M=D
@Sys.error
0;JMP
(Sys.Sys.error$ret.3)
//pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
//label IF_FALSE0
(Sys.Sys.wait$IF_FALSE0)
//label WHILE_EXP0
(Sys.Sys.wait$WHILE_EXP0)
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@Sys.Sys.wait$ifnegfirst1
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Sys.Sys.wait$samesign1
D;JGT
D=-1
@Sys.Sys.wait$true1
D;JGT
@Sys.Sys.wait$false1
0;JMP
(Sys.Sys.wait$ifnegfirst1)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Sys.Sys.wait$samesign1
D;JLT
D=1
@Sys.Sys.wait$true1
D;JGT
@Sys.Sys.wait$false1
0;JMP
(Sys.Sys.wait$samesign1)
@R14
D=D-M
@Sys.Sys.wait$true1
D;JGT
@Sys.Sys.wait$false1
0;JMP
(Sys.Sys.wait$true1)
@SP
A=M
M=-1
@SP
M=M+1
@Sys.Sys.wait$end1
0;JMP
(Sys.Sys.wait$false1)
@SP
A=M
M=0
@SP
M=M+1
(Sys.Sys.wait$end1)
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M
@Sys.Sys.wait$WHILE_END0
D;JGT
D;JLT
//push constant 50
@50
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@1
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//label WHILE_EXP1
(Sys.Sys.wait$WHILE_EXP1)
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@Sys.Sys.wait$ifnegfirst2
D;JLT
@R14
M=D
@SP
M=M-1
A=M
D=M
@Sys.Sys.wait$samesign2
D;JGT
D=-1
@Sys.Sys.wait$true2
D;JGT
@Sys.Sys.wait$false2
0;JMP
(Sys.Sys.wait$ifnegfirst2)
@R14
M=D
@SP
M=M-1
A=M
D=M
@Sys.Sys.wait$samesign2
D;JLT
D=1
@Sys.Sys.wait$true2
D;JGT
@Sys.Sys.wait$false2
0;JMP
(Sys.Sys.wait$samesign2)
@R14
D=D-M
@Sys.Sys.wait$true2
D;JGT
@Sys.Sys.wait$false2
0;JMP
(Sys.Sys.wait$true2)
@SP
A=M
M=-1
@SP
M=M+1
@Sys.Sys.wait$end2
0;JMP
(Sys.Sys.wait$false2)
@SP
A=M
M=0
@SP
M=M+1
(Sys.Sys.wait$end2)
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END1
@SP
M=M-1
A=M
D=M
@Sys.Sys.wait$WHILE_END1
D;JGT
D;JLT
//push local 0
@1
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
//pop local 0
@1
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//goto WHILE_EXP1
@Sys.Sys.wait$WHILE_EXP1
0;JMP
//label WHILE_END1
(Sys.Sys.wait$WHILE_END1)
//push argument 0
@2
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
//pop argument 0
@2
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//goto WHILE_EXP0
@Sys.Sys.wait$WHILE_EXP0
0;JMP
//label WHILE_END0
(Sys.Sys.wait$WHILE_END0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//return
@1
D=M
@R14
M=D
@5
A=D-A
D=M
@R15
M=D
//pop argument 0
@2
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@2
D=M
@SP
M=D+1
@R14
A=M-1
D=M
@4
M=D
@2
D=A
@R14
A=M-D
D=M
@3
M=D
@3
D=A
@R14
A=M-D
D=M
@2
M=D
@4
D=A
@R14
A=M-D
D=M
@1
M=D
@R15
A=M
0;JMP
//function Sys.error 0
(Sys.error)
//label WHILE_EXP0
(Sys.Sys.error$WHILE_EXP0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//not
@SP
A=M-1
M=!M
//if-goto WHILE_END0
@SP
M=M-1
A=M
D=M
@Sys.Sys.error$WHILE_END0
D;JGT
D;JLT
//goto WHILE_EXP0
@Sys.Sys.error$WHILE_EXP0
0;JMP
//label WHILE_END0
(Sys.Sys.error$WHILE_END0)
