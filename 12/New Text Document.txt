// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {
        field int buffer_len;
        field int str_len;
        field Array buffer;

        /** constructs a new empty string with a maximum length of maxLength
         *  and initial length of 0. */
        constructor String new(int maxLength) {
            let str_len = 0;
            if (maxLength > 0){
                let buffer = Array.new(maxLength);
                let buffer_len = maxLength;
                return this;
            }
            let maxLength = 1;
            let buffer = Array.new(maxLength);
            return this;
        }

        /** Disposes this string. */
        method void dispose() {
            do Array.dispose(buffer);
            return;
        }

        /** Returns the current length of this string. */
        method int length() {
            return str_len;
        }

        /** Returns the character at the j-th location of this string. */
        method char charAt(int j) {
            return buffer[j];
        }

    /** Sets the character at the j-th location of this string to c. */
        method void setCharAt(int j, char c) {
            let buffer[j] = c;
            return;
        }

        /** Appends c to this string's end and returns this string. */
        method String appendChar(char c) {
            if (str_len < buffer_len){
                let buffer[str_len] = c;
                let str_len = str_len + 1;
            }
            return this;
        }

        /** Erases the last character from this string. */
        method void eraseLastChar() {
            if ((str_len < 0) | (str_len = 0) ){
                return;
            }
            let str_len = str_len - 1;
            return;
        }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
         var int val, i, d, sign;
         var int c;

         // handle negative value
         if ((str_len > 0) & (buffer[0] = 45)){
             let sign = -1;
         }else{
             let sign = 1;
         }

         // 1. let val = 0
         let val = 0;
         let i = 0;
         let sign = 1;

         // 2. for (i = 0 .. str.length()) do

         while ((i < str_len) & ((buffer[i] > 47) & (buffer[i] < 58))){
                 // 3.   let d = integer value of str.charAt(i)
                 let c = buffer[i];
                 let d = c - 48;

                 // 4.   let val = (val*10) + d
                 let val = (val*10) + d;

                 let i = i + 1;
         }
         // 5. return val
         return val*sign;
     }

    method void setInt(int val) {

        let str_len = 0;

        // handle negative value
        if (val < 0){
            do appendChar(45);
            let val = 0 - val;
        }
        do set2Int(val);
        return;
    }

    method char castIntToChar(int num) {
        return num;
    }

    method void set2Int(int val){
            var int lastDigit, subRes;
            var char c;

            // 1. let lastDigit = val % 10
            let subRes = val / 10;
            let subRes = 10*subRes;
            let lastDigit = val - subRes;

            // 2. let c = character representing lastDigit
            let c = castIntToChar(lastDigit + 48);

            // 3. if (val < 10)
            if (val < 10){

                // 4.   do c (as a string)
                do appendChar(c);

            // 5. else
            } else{

                // 6.   do int2String(val / 10).appendChar(c)
                do set2Int(val / 10);
                do appendChar(c);
            }
            return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
         return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
         return 34;
    }
}


_________________________________________________________




        function int getNDividedByTwo(int x){
            var int n, i;
            let n = 1;
            let i = 0;
            while (x > n+n){
                let n = n + n;
                let i = i + 1;
            }
            

            return i;
        }


____________________________________________________________
        var Array cur, block;
        // 1. segment = o - 1

        // 2. Insert segment into the freeList


        let cur = freeList;

        let prev = 0;
        while (~(cur = null)){
            let prev = cur;
            let cur = cur[next];
        }
        let block = o - 2;
        let block[next] = null;
        let block[length] = block[length] - 2;
        let prev[next] = block;
        return;