// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int maxLen;
    field int curLength;
    field Array string;

    /** constructs a new empty string with a maximum length of maxLen
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let curLength = 0;
        if (maxLength > 0){
            let string = Array.new(maxLength);
            let maxLen = maxLength;
            return this;
        }
        let maxLen = 1;
        let string = Array.new(maxLen);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do string.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return curLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let string[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (curLength < maxLen){
            let string[curLength] = c;
            let curLength = curLength + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if ((curLength < 0) | (curLength = 0) ){
            return;
        }
        let curLength = curLength - 1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i, d, sign;
        var int c;

        // handle negative value
        if ((curLength > 0) & (string[0] = 45)){
            let sign = -1;
        }else{
            let sign = 1;
        }

        // 1. let val = 0
        let val = 0;

        // 2. for (i = 0 .. str.length()) do
        if (sign = 1){
            let i = 0;
        } else {
            let i = 1;
        }
        while ((i < curLength) & ((string[i] > 47) & (string[i] < 58))){
                // 3.   let d = integer value of str.charAt(i)
                let c = string[i];
                let d = c - 48;

                // 4.   let val = (val*10) + d
                let val = (val*10) + d;

                let i = i + 1;
        }
        // 5. return val
        return val*sign;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {

        let curLength = 0;

        // handle negative value
        if (val < 0){
            do appendChar(45);
            let val = 0 - val;
        }
        do set2Int(val);
        return;
    }

    /** convert int to char */
    method char castIntToChar(int num) {
        return num;
    }

    /** set2Int recursively , so no need to clear the string each time */
    method void set2Int(int val){
            var int lastDigit, subRes;
            var char c;

            // 1. let lastDigit = val % 10
            let subRes = val / 10;
            let subRes = 10*subRes;
            let lastDigit = val - subRes;

            // 2. let c = character representing lastDigit
            let c = castIntToChar(lastDigit + 48);

            // 3. if (val < 10)
            if (val < 10){

                // 4.   do c (as a string)
                do appendChar(c);

            // 5. else
            } else{

                // 6.   do int2String(val / 10).appendChar(c)
                do set2Int(val / 10);
                do appendChar(c);
            }
            return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
         return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
         return 34;
    }
}
