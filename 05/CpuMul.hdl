// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14]==1 and instruction[13]==1),
// then CpuMul behaves exactly the same as the regular CPU.
// If instruction[15]==1 and instruction[14]==0 the chip will behave as follows:
// | Instruction           | 15 | 14 | 13 | a | c1 | c2 | c3 | c4 | c5 | c6 |
// |-----------------------|:--:|:--:|:--:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
// | Regular a-instruction |  0 |  * |  * | * |  * |  * |  * |  * |  * |  * |
// | Regular c-instruction |  1 |  1 |  1 | * |  * |  * |  * |  * |  * |  * |
// | dest=A<<;jump         |  1 |  0 |  1 | 0 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=D<<;jump         |  1 |  0 |  1 | 0 |  1 |  1 |  0 |  0 |  0 |  0 |
// | dest=M<<;jump         |  1 |  0 |  1 | 1 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=A>>;jump         |  1 |  0 |  1 | 0 |  0 |  0 |  0 |  0 |  0 |  0 |
// | dest=D>>;jump         |  1 |  0 |  1 | 0 |  0 |  1 |  0 |  0 |  0 |  0 |
// | dest=M>>;jump         |  1 |  0 |  1 | 1 |  0 |  0 |  0 |  0 |  0 |  0 |
// Where:
// - "<<" is a left shift, and ">>" is a right shift, as defined in project 2.
//   These notations were chosen because they are used in real programming
//   languages.
// - dest and jump can take the same values as in the regular CPU.

CHIP CpuMul {
    IN  
        inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT 
        outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
    
    Not(in=instruction[15], out=loadbit);
    Mux16(a=wALU, b=instruction, sel=loadbit, out=inA);

    Or(a=loadbit, b=instruction[5], out=loadA);
    ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM);

    And(a=instruction[15],b=instruction[4],out=loadD);
    DRegister(in=wALU, load=loadD, out=outD);

    And(a=instruction[15],b=instruction[12],out=loadin);
    Mux16(a=outA, b=inM, sel=loadin, out=yinALU);

    ExtendAlu(x=outD, y=yinALU, instruction[7..8]=instruction[14..15], instruction[0..6]=instruction[6..12], out=wALU, out=outM, zr=zr, ng=ng);
    
    And(a=instruction[15],b=instruction[3],out=writeM);

    PC(in=outA, load=load, inc=true, reset=reset, out[0..14]=pc);

    And(a=instruction[15],b=instruction[1],out=loadzr);
    And(a=zr, b=loadzr, out=iszero);

    And(a=instruction[15],b=instruction[2],out=loadng);
    And(a=ng, b=loadng, out=isneg);

    Not(in=ng, out=ngNot);
    Not(in=zr, out=zrNot);

    And(a=zrNot, b=ngNot, out=zrNotOrngNot);
    And(a=instruction[15],b=instruction[0],out=loadpos);
    And(a=zrNotOrngNot, b=loadpos, out=ispos);
    
    Or(a=iszero, b=isneg, out=res1);
    Or(a=res1, b=ispos, out=load);
}
